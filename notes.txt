=========================================================
ANIMATION/UI FRAMEWORK

Design concept:
- structured (keyframes are nodes in a graph and animations are transitions between nodes)
  - reactive (state transitions can be set by events like mouse enter/leave, and clicks)
  - proactive (can send events and oneshots on enter/exit per node)
    * takes precedence over everything else, and is an escape hatch a.k.a. a footgun
  - stateful (animation nodes can be an enum with data)
  - centralized (transitions between nodes must be triggered from the parent)
    - chainable (animations can be sequenced one after another by queueing transitions)
      - reversible (an in-progress animation can be reversed by queueing the reverse transition)
    - coordinated (animations won't play unless every child node is done with their animations)
  - directionless
    * ties in to reversible
    - consistent (the state of an entity, its components, and its children depend only on where it is in the graph (at a node/somewhere between nodes), not the direction in which it is animated)
    - tweenable (any animation can have a tween applied to it, even an already tweened animation)
- flexible
  - able to transform any component in any way through a lens(value: &mut T, progress: f32)
  - able to spawn and despawn entities
  - able to add and remove components
- localized (registering a new animation must be done in just 2 places: a global resource and the parent entity)
- composable? (any two animations can be combined into one, so long as they don't conflict)
  - animation A can play during animation B
  - possibly just implemented with parent/child hierarchy tbh

=========================================================
UPDATE PATTERN

        from-ct  to-ct  result
empty     _        0    empty
empty     _        1    filled
empty     _        2    err
filled    1             empty
filled    _             filled

event loop path:
a clock tick
tells the app
tells the display grid
tells the internal simulation
returns a set of tile movements
updates the internal simulation
updates the display grid
ðŸ¥³ðŸŽ‰


=========================================================
FILE ORGANIZATION

FRACTORY
> Planets
  * get all planet names
  > (planet name)
    - Edit
      - name
    > Fragments
      * get all fragment names
      > (fragment name)
        > Composition
          * display name
          * display composition
          * display symmetry
          - Edit
            - name
            - composition
        > Behavior
          * open behavior file in an editor
    > Biomes
      * get all biomes
      > (biome name)
        - Edit


What can i edit?
> Planets
  > name
> Fragments
  > name
  > composition
  > behavior

